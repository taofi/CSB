; Listing generated by Microsoft (R) Optimizing Compiler Version 19.33.31629.0 

	TITLE	C:\Users\User\Desktop\óí\êïî\lab1\lab1\Debug\NumberOfDay.obj
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

msvcjmc	SEGMENT
__06641D56_NumberOfDay@cpp DB 01H
msvcjmc	ENDS
PUBLIC	?NumberOfDay@@YAHHH_N@Z				; NumberOfDay
PUBLIC	__JustMyCode_Default
EXTRN	@_RTC_CheckStackVars@8:PROC
EXTRN	@__CheckForDebuggerJustMyCode@4:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_InitBase:PROC
EXTRN	__RTC_Shutdown:PROC
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
; Function compile flags: /Odt
;	COMDAT __JustMyCode_Default
_TEXT	SEGMENT
__JustMyCode_Default PROC				; COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	5d		 pop	 ebp
  00004	c3		 ret	 0
__JustMyCode_Default ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\User\Desktop\óí\êïî\lab1\lab1\NumberOfDay.cpp
;	COMDAT ?NumberOfDay@@YAHHH_N@Z
_TEXT	SEGMENT
_i$1 = -76						; size = 4
_mas$ = -64						; size = 48
_number$ = -8						; size = 4
_day$ = 8						; size = 4
_month$ = 12						; size = 4
_isVis$ = 16						; size = 1
?NumberOfDay@@YAHHH_N@Z PROC				; NumberOfDay, COMDAT

; 1    : int NumberOfDay(int day, int month, bool isVis) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 10 01 00
	00		 sub	 esp, 272		; 00000110H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d 7d b0	 lea	 edi, DWORD PTR [ebp-80]
  0000f	b9 14 00 00 00	 mov	 ecx, 20			; 00000014H
  00014	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00019	f3 ab		 rep stosd
  0001b	b9 00 00 00 00	 mov	 ecx, OFFSET __06641D56_NumberOfDay@cpp
  00020	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 2    : 	int number = day;

  00025	8b 45 08	 mov	 eax, DWORD PTR _day$[ebp]
  00028	89 45 f8	 mov	 DWORD PTR _number$[ebp], eax

; 3    : 	int mas[12] = { 31,28,31,30,31,30,31,31,30,31,30,31 };

  0002b	c7 45 c0 1f 00
	00 00		 mov	 DWORD PTR _mas$[ebp], 31 ; 0000001fH
  00032	c7 45 c4 1c 00
	00 00		 mov	 DWORD PTR _mas$[ebp+4], 28 ; 0000001cH
  00039	c7 45 c8 1f 00
	00 00		 mov	 DWORD PTR _mas$[ebp+8], 31 ; 0000001fH
  00040	c7 45 cc 1e 00
	00 00		 mov	 DWORD PTR _mas$[ebp+12], 30 ; 0000001eH
  00047	c7 45 d0 1f 00
	00 00		 mov	 DWORD PTR _mas$[ebp+16], 31 ; 0000001fH
  0004e	c7 45 d4 1e 00
	00 00		 mov	 DWORD PTR _mas$[ebp+20], 30 ; 0000001eH
  00055	c7 45 d8 1f 00
	00 00		 mov	 DWORD PTR _mas$[ebp+24], 31 ; 0000001fH
  0005c	c7 45 dc 1f 00
	00 00		 mov	 DWORD PTR _mas$[ebp+28], 31 ; 0000001fH
  00063	c7 45 e0 1e 00
	00 00		 mov	 DWORD PTR _mas$[ebp+32], 30 ; 0000001eH
  0006a	c7 45 e4 1f 00
	00 00		 mov	 DWORD PTR _mas$[ebp+36], 31 ; 0000001fH
  00071	c7 45 e8 1e 00
	00 00		 mov	 DWORD PTR _mas$[ebp+40], 30 ; 0000001eH
  00078	c7 45 ec 1f 00
	00 00		 mov	 DWORD PTR _mas$[ebp+44], 31 ; 0000001fH

; 4    : 	if (isVis)

  0007f	0f b6 45 10	 movzx	 eax, BYTE PTR _isVis$[ebp]
  00083	85 c0		 test	 eax, eax
  00085	74 1b		 je	 SHORT $LN5@NumberOfDa

; 5    : 		mas[1] ++;

  00087	b8 04 00 00 00	 mov	 eax, 4
  0008c	c1 e0 00	 shl	 eax, 0
  0008f	8b 4c 05 c0	 mov	 ecx, DWORD PTR _mas$[ebp+eax]
  00093	83 c1 01	 add	 ecx, 1
  00096	ba 04 00 00 00	 mov	 edx, 4
  0009b	c1 e2 00	 shl	 edx, 0
  0009e	89 4c 15 c0	 mov	 DWORD PTR _mas$[ebp+edx], ecx
$LN5@NumberOfDa:

; 6    : 	for (int i = 0; i < month - 1; i++)

  000a2	c7 45 b4 00 00
	00 00		 mov	 DWORD PTR _i$1[ebp], 0
  000a9	eb 09		 jmp	 SHORT $LN4@NumberOfDa
$LN2@NumberOfDa:
  000ab	8b 45 b4	 mov	 eax, DWORD PTR _i$1[ebp]
  000ae	83 c0 01	 add	 eax, 1
  000b1	89 45 b4	 mov	 DWORD PTR _i$1[ebp], eax
$LN4@NumberOfDa:
  000b4	8b 45 0c	 mov	 eax, DWORD PTR _month$[ebp]
  000b7	83 e8 01	 sub	 eax, 1
  000ba	39 45 b4	 cmp	 DWORD PTR _i$1[ebp], eax
  000bd	7d 0f		 jge	 SHORT $LN3@NumberOfDa

; 7    : 		number += mas[i];

  000bf	8b 45 b4	 mov	 eax, DWORD PTR _i$1[ebp]
  000c2	8b 4d f8	 mov	 ecx, DWORD PTR _number$[ebp]
  000c5	03 4c 85 c0	 add	 ecx, DWORD PTR _mas$[ebp+eax*4]
  000c9	89 4d f8	 mov	 DWORD PTR _number$[ebp], ecx
  000cc	eb dd		 jmp	 SHORT $LN2@NumberOfDa
$LN3@NumberOfDa:

; 8    : 	return number;

  000ce	8b 45 f8	 mov	 eax, DWORD PTR _number$[ebp]

; 9    : }

  000d1	52		 push	 edx
  000d2	8b cd		 mov	 ecx, ebp
  000d4	50		 push	 eax
  000d5	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN9@NumberOfDa
  000db	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  000e0	58		 pop	 eax
  000e1	5a		 pop	 edx
  000e2	5f		 pop	 edi
  000e3	5e		 pop	 esi
  000e4	5b		 pop	 ebx
  000e5	81 c4 10 01 00
	00		 add	 esp, 272		; 00000110H
  000eb	3b ec		 cmp	 ebp, esp
  000ed	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000f2	8b e5		 mov	 esp, ebp
  000f4	5d		 pop	 ebp
  000f5	c3		 ret	 0
  000f6	66 90		 npad	 2
$LN9@NumberOfDa:
  000f8	01 00 00 00	 DD	 1
  000fc	00 00 00 00	 DD	 $LN8@NumberOfDa
$LN8@NumberOfDa:
  00100	c0 ff ff ff	 DD	 -64			; ffffffc0H
  00104	30 00 00 00	 DD	 48			; 00000030H
  00108	00 00 00 00	 DD	 $LN7@NumberOfDa
$LN7@NumberOfDa:
  0010c	6d		 DB	 109			; 0000006dH
  0010d	61		 DB	 97			; 00000061H
  0010e	73		 DB	 115			; 00000073H
  0010f	00		 DB	 0
?NumberOfDay@@YAHHH_N@Z ENDP				; NumberOfDay
_TEXT	ENDS
END
